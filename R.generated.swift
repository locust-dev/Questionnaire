//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `authBackground`.
    static let authBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "authBackground")
    /// Color `mainBlueColor`.
    static let mainBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainBlueColor")
    /// Color `mainGrayColor`.
    static let mainGrayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainGrayColor")
    /// Color `mainLightSkyBlueColor`.
    static let mainLightSkyBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainLightSkyBlueColor")
    /// Color `mainSkyBlueColor`.
    static let mainSkyBlueColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainSkyBlueColor")
    /// Color `rightAnswer`.
    static let rightAnswer = Rswift.ColorResource(bundle: R.hostingBundle, name: "rightAnswer")
    /// Color `wrongAnswer`.
    static let wrongAnswer = Rswift.ColorResource(bundle: R.hostingBundle, name: "wrongAnswer")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "authBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func authBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.authBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBlueColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainGrayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainGrayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainGrayColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainLightSkyBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainLightSkyBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainLightSkyBlueColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainSkyBlueColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainSkyBlueColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainSkyBlueColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "rightAnswer", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func rightAnswer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.rightAnswer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "wrongAnswer", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func wrongAnswer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.wrongAnswer, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "authBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func authBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.authBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainBlueColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainBlueColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBlueColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainGrayColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainGrayColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainGrayColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainLightSkyBlueColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainLightSkyBlueColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainLightSkyBlueColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainSkyBlueColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainSkyBlueColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainSkyBlueColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "rightAnswer", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func rightAnswer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.rightAnswer.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "wrongAnswer", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func wrongAnswer(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.wrongAnswer.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `NiblessClasses.md`.
    static let niblessClassesMd = Rswift.FileResource(bundle: R.hostingBundle, name: "NiblessClasses", pathExtension: "md")
    /// Resource file `Nunito-Bold.ttf`.
    static let nunitoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Bold", pathExtension: "ttf")
    /// Resource file `Nunito-ExtraBold.ttf`.
    static let nunitoExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-ExtraBold", pathExtension: "ttf")
    /// Resource file `Nunito-Medium.ttf`.
    static let nunitoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Medium", pathExtension: "ttf")
    /// Resource file `Nunito-Regular.ttf`.
    static let nunitoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Nunito-Regular", pathExtension: "ttf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NiblessClasses", withExtension: "md")`
    static func niblessClassesMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.niblessClassesMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Bold", withExtension: "ttf")`
    static func nunitoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-ExtraBold", withExtension: "ttf")`
    static func nunitoExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Medium", withExtension: "ttf")`
    static func nunitoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Nunito-Regular", withExtension: "ttf")`
    static func nunitoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nunitoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Nunito-Bold`.
    static let nunitoBold = Rswift.FontResource(fontName: "Nunito-Bold")
    /// Font `Nunito-ExtraBold`.
    static let nunitoExtraBold = Rswift.FontResource(fontName: "Nunito-ExtraBold")
    /// Font `Nunito-Medium`.
    static let nunitoMedium = Rswift.FontResource(fontName: "Nunito-Medium")
    /// Font `Nunito-Regular`.
    static let nunitoRegular = Rswift.FontResource(fontName: "Nunito-Regular")

    /// `UIFont(name: "Nunito-Bold", size: ...)`
    static func nunitoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoBold, size: size)
    }

    /// `UIFont(name: "Nunito-ExtraBold", size: ...)`
    static func nunitoExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoExtraBold, size: size)
    }

    /// `UIFont(name: "Nunito-Medium", size: ...)`
    static func nunitoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoMedium, size: size)
    }

    /// `UIFont(name: "Nunito-Regular", size: ...)`
    static func nunitoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: nunitoRegular, size: size)
    }

    static func validate() throws {
      if R.font.nunitoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Bold' could not be loaded, is 'Nunito-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-ExtraBold' could not be loaded, is 'Nunito-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Medium' could not be loaded, is 'Nunito-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.nunitoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Nunito-Regular' could not be loaded, is 'Nunito-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `Lock`.
    static let lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lock")
    /// Image `MainIcon`.
    static let mainIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainIcon")
    /// Image `arrowReversed`.
    static let arrowReversed = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowReversed")
    /// Image `closeButtonReversed`.
    static let closeButtonReversed = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeButtonReversed")
    /// Image `closeButton`.
    static let closeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "closeButton")
    /// Image `closedEye`.
    static let closedEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "closedEye")
    /// Image `deselectedCirlce`.
    static let deselectedCirlce = Rswift.ImageResource(bundle: R.hostingBundle, name: "deselectedCirlce")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `mainTextName`.
    static let mainTextName = Rswift.ImageResource(bundle: R.hostingBundle, name: "mainTextName")
    /// Image `noImagePlaceholder`.
    static let noImagePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "noImagePlaceholder")
    /// Image `openedEye`.
    static let openedEye = Rswift.ImageResource(bundle: R.hostingBundle, name: "openedEye")
    /// Image `pencil`.
    static let pencil = Rswift.ImageResource(bundle: R.hostingBundle, name: "pencil")
    /// Image `reloadPlaceholder`.
    static let reloadPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "reloadPlaceholder")
    /// Image `reversedSelectedCircle`.
    static let reversedSelectedCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "reversedSelectedCircle")
    /// Image `reverserDeselectedCircle`.
    static let reverserDeselectedCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "reverserDeselectedCircle")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `selectedCirlce`.
    static let selectedCirlce = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedCirlce")
    /// Image `tabbar_profile`.
    static let tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile")
    /// Image `tabbar_tests`.
    static let tabbar_tests = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_tests")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Lock", bundle: ..., traitCollection: ...)`
    static func lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainIcon", bundle: ..., traitCollection: ...)`
    static func mainIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowReversed", bundle: ..., traitCollection: ...)`
    static func arrowReversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowReversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeButton", bundle: ..., traitCollection: ...)`
    static func closeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closeButtonReversed", bundle: ..., traitCollection: ...)`
    static func closeButtonReversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closeButtonReversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "closedEye", bundle: ..., traitCollection: ...)`
    static func closedEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.closedEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "deselectedCirlce", bundle: ..., traitCollection: ...)`
    static func deselectedCirlce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deselectedCirlce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mainTextName", bundle: ..., traitCollection: ...)`
    static func mainTextName(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainTextName, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "noImagePlaceholder", bundle: ..., traitCollection: ...)`
    static func noImagePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noImagePlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "openedEye", bundle: ..., traitCollection: ...)`
    static func openedEye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.openedEye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pencil", bundle: ..., traitCollection: ...)`
    static func pencil(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pencil, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reloadPlaceholder", bundle: ..., traitCollection: ...)`
    static func reloadPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reloadPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reversedSelectedCircle", bundle: ..., traitCollection: ...)`
    static func reversedSelectedCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reversedSelectedCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "reverserDeselectedCircle", bundle: ..., traitCollection: ...)`
    static func reverserDeselectedCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.reverserDeselectedCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedCirlce", bundle: ..., traitCollection: ...)`
    static func selectedCirlce(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedCirlce, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_profile", bundle: ..., traitCollection: ...)`
    static func tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_tests", bundle: ..., traitCollection: ...)`
    static func tabbar_tests(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_tests, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "mainTextName", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mainTextName' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
